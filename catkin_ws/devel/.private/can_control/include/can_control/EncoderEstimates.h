// Generated by gencpp from file can_control/EncoderEstimates.msg
// DO NOT EDIT!


#ifndef CAN_CONTROL_MESSAGE_ENCODERESTIMATES_H
#define CAN_CONTROL_MESSAGE_ENCODERESTIMATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_control
{
template <class ContainerAllocator>
struct EncoderEstimates_
{
  typedef EncoderEstimates_<ContainerAllocator> Type;

  EncoderEstimates_()
    : device_id(0)
    , position(0.0)
    , velocity(0.0)  {
    }
  EncoderEstimates_(const ContainerAllocator& _alloc)
    : device_id(0)
    , position(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _device_id_type;
  _device_id_type device_id;

   typedef float _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::can_control::EncoderEstimates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_control::EncoderEstimates_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderEstimates_

typedef ::can_control::EncoderEstimates_<std::allocator<void> > EncoderEstimates;

typedef boost::shared_ptr< ::can_control::EncoderEstimates > EncoderEstimatesPtr;
typedef boost::shared_ptr< ::can_control::EncoderEstimates const> EncoderEstimatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_control::EncoderEstimates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_control::EncoderEstimates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_control::EncoderEstimates_<ContainerAllocator1> & lhs, const ::can_control::EncoderEstimates_<ContainerAllocator2> & rhs)
{
  return lhs.device_id == rhs.device_id &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_control::EncoderEstimates_<ContainerAllocator1> & lhs, const ::can_control::EncoderEstimates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_control::EncoderEstimates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_control::EncoderEstimates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_control::EncoderEstimates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_control::EncoderEstimates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_control::EncoderEstimates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_control::EncoderEstimates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_control::EncoderEstimates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fec274c383b9ce718dfe2666eb480e27";
  }

  static const char* value(const ::can_control::EncoderEstimates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfec274c383b9ce71ULL;
  static const uint64_t static_value2 = 0x8dfe2666eb480e27ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_control::EncoderEstimates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_control/EncoderEstimates";
  }

  static const char* value(const ::can_control::EncoderEstimates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_control::EncoderEstimates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 device_id\n"
"float32 position\n"
"float32 velocity\n"
;
  }

  static const char* value(const ::can_control::EncoderEstimates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_control::EncoderEstimates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_id);
      stream.next(m.position);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderEstimates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_control::EncoderEstimates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_control::EncoderEstimates_<ContainerAllocator>& v)
  {
    s << indent << "device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_id);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_CONTROL_MESSAGE_ENCODERESTIMATES_H
