// Generated by gencpp from file can_control/MecanumControl.msg
// DO NOT EDIT!


#ifndef CAN_CONTROL_MESSAGE_MECANUMCONTROL_H
#define CAN_CONTROL_MESSAGE_MECANUMCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_control
{
template <class ContainerAllocator>
struct MecanumControl_
{
  typedef MecanumControl_<ContainerAllocator> Type;

  MecanumControl_()
    : device_id(0)
    , mode(0)
    , value(0.0)  {
    }
  MecanumControl_(const ContainerAllocator& _alloc)
    : device_id(0)
    , mode(0)
    , value(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _device_id_type;
  _device_id_type device_id;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef float _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_CALIB)
  #undef MODE_CALIB
#endif
#if defined(_WIN32) && defined(MODE_IDLE)
  #undef MODE_IDLE
#endif
#if defined(_WIN32) && defined(MODE_CLOSE_LOOP)
  #undef MODE_CLOSE_LOOP
#endif
#if defined(_WIN32) && defined(MODE_CLEAR_ERROR)
  #undef MODE_CLEAR_ERROR
#endif
#if defined(_WIN32) && defined(MODE_HOMING)
  #undef MODE_HOMING
#endif
#if defined(_WIN32) && defined(MODE_SET_TARGET)
  #undef MODE_SET_TARGET
#endif

  enum {
    MODE_CALIB = 0u,
    MODE_IDLE = 1u,
    MODE_CLOSE_LOOP = 2u,
    MODE_CLEAR_ERROR = 3u,
    MODE_HOMING = 4u,
    MODE_SET_TARGET = 5u,
  };


  typedef boost::shared_ptr< ::can_control::MecanumControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_control::MecanumControl_<ContainerAllocator> const> ConstPtr;

}; // struct MecanumControl_

typedef ::can_control::MecanumControl_<std::allocator<void> > MecanumControl;

typedef boost::shared_ptr< ::can_control::MecanumControl > MecanumControlPtr;
typedef boost::shared_ptr< ::can_control::MecanumControl const> MecanumControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_control::MecanumControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_control::MecanumControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_control::MecanumControl_<ContainerAllocator1> & lhs, const ::can_control::MecanumControl_<ContainerAllocator2> & rhs)
{
  return lhs.device_id == rhs.device_id &&
    lhs.mode == rhs.mode &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_control::MecanumControl_<ContainerAllocator1> & lhs, const ::can_control::MecanumControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_control::MecanumControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_control::MecanumControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_control::MecanumControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_control::MecanumControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_control::MecanumControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_control::MecanumControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_control::MecanumControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc8cc5d29cc98dd7c83c44e13887d465";
  }

  static const char* value(const ::can_control::MecanumControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc8cc5d29cc98dd7ULL;
  static const uint64_t static_value2 = 0xc83c44e13887d465ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_control::MecanumControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_control/MecanumControl";
  }

  static const char* value(const ::can_control::MecanumControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_control::MecanumControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MODE_CALIB       = 0\n"
"uint8 MODE_IDLE        = 1\n"
"uint8 MODE_CLOSE_LOOP  = 2\n"
"uint8 MODE_CLEAR_ERROR = 3\n"
"uint8 MODE_HOMING      = 4\n"
"uint8 MODE_SET_TARGET  = 5\n"
"\n"
"uint8 device_id\n"
"uint8 mode\n"
"float32 value\n"
;
  }

  static const char* value(const ::can_control::MecanumControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_control::MecanumControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_id);
      stream.next(m.mode);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MecanumControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_control::MecanumControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_control::MecanumControl_<ContainerAllocator>& v)
  {
    s << indent << "device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_id);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_CONTROL_MESSAGE_MECANUMCONTROL_H
